find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
q
library(swirl)
swirl()
bye()
swirl()
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5!=7
!(5==7)
FALSE & FALSE
TRUE & C(TRUE,FALSE,FALSE)
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE|c(TRUE,FALSE,FALSE)
TRUE||c(TRUE,FALSE,FALSE)
5>8||6!=8&&4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints)
any(ints<0)
all(ints>0)
x<- function(x,n){x^3}
x(3)
a<-1:10
a>5
if(a>5)
{}
if(a>5){
a<-0}
swirl()
d1<- Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
play()
d0<-as.Date("01-01-01")
d0
unclass
unclass(d0)
nxt()
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass
unclass(t2)
str(unclass(t2))
t2$min
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
t4<-strptime
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(),t1,units="days")
set.seed(1)
rpois
rpois(5,2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
rm(list<-ls())
rm(list <-ls())
rm(list =ls())
source('~/.active-rstudio-document')
f(a=1)
a=pi
f(a)
f(a)
f.x
View(f)
View(f)
View(f)
source('~/.active-rstudio-document')
View(f)
View(f)
a
cos(pi)
source('~/.active-rstudio-document')
f(pi)
fx
source('~/.active-rstudio-document')
f(pi)
str(f)
fx
f(pi)
fx
source('~/.active-rstudio-document')
fx
f(pi)
pi
fa<-f(a)
a<-0
b<-1
fa<-f(a)
fb<-f(b)
fa
fb
c<-a+b/2
fc<-f(c)
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){i<-length(x)
x[i]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
telegram("my love")
play()
telegram(my love)
telegram(my love)
telegram(55)
nxt()
submit()
mad_libs(place="New Delhi",adjective="angry",noun="cameras")
submit()
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
dir
dir()
setwd("C:/Users/hp/Desktop/R-data")
outcome<-read.csv("hospital/outcome-of-care-measures.csv")
outcome<-read.csv("hospital data/outcome-of-care-measures.csv")
outcome<-read.csv("hospital data/outcome-of-care-measures.csv",colClasses = "character")
head(outcome)
str(outcome)
ncol(outcome)
nrow(outcome)
outcome[,11]<-as.numeric(outcome[,11])
hist(outcome[,11])
head(outcome[,11])
length(outcome[,11])
source('~/.active-rstudio-document')
hosp.data<-best()
head(hosp.data)
c(1:10,11,12)
names(hosp.data)
source('~/.active-rstudio-document')
hosp.data<-best()
names(hosp.data)
hosp.data[,11]
as.numeric(hosp.data[,11])
ncol(hosp.data)
hosp.data[,1]<-as.numeric(hosp.data[,1])
hosp.data<-best()
hosp.data[,c(11,17,23)]<-as.numeric(hosp.data[,c(11,17,23)])
hosp.data[,11]<-as.numeric(hosp.data[,11])
hosp.data[,17]<-as.numeric(hosp.data[,17])
hosp.data[,23]<-as.numeric(hosp.data[,23])
head(hosp.data$State)
table(hosp.data$State)
names(hosp.data$State)
levels(hosp.data$State)
unique(hosp.data$State)
split(hosp.data,hosp.data$State)
str(split(hosp.data,hosp.data$State))
length(list(foo=1:3,bar=3))
length(split(hosp.data,hosp.data$State))
states<-unique(hosp.data$State)
names(split(hosp.data,hosp.data$State))
states<-as.factor(unique(hosp.data$State))
states
hosp.data<-read.csv("hospital data/outcome-of-care-measures.csv",colClasses = "character")
state.data<-split(hosp.data,hosp.data$State)
loc<-"AK"
state.data$loc
state.data[loc]
data<-state.data[loc]
data<-data.frame(data)
ncol(data)
nrow(data)
data[,11]
match("TX",states)
is.element("TX",states)
?stop
iter <- 12
try(if(iter > 10) stop("too many iterations")
)
rm(iter)
?try
try(stop("invalid state"))
is.element(loc,states)
outcomes<-c("heart attack","heart failure","pneumonia")
source('~/.active-rstudio-document')
best("BB","heart attack")
best("AK","heart attack")
best("AK","heart")
best("AK","heart failure")
best("AK","pneumonia")
tapply
data[,11]<-as.numeric(data)
w<-complete.cases(data)
data<-data[w,]
data<-state.data[loc]
data<-data.frame(data)
data[,11]<-as.numeric(data[,11])
w<-complete.cases(data)
data<-data[w,]
data<-state.data[loc]
data<-data.frame(data)
data[,11]
data[,11]<-as.numeric(data[,11])
w<-complete.cases(data)
data<-data[w,]
data[,11]
max(data[,11])
which(max(data[,11]))
max.col(data[,11])
?max.col
?which.max
which.max(data[,11])
vec<-c(1,2,3,5,6,7)
vec<-c(1,2,3,7,6,7)
vec<-c(1,2,3,3,3)
w<- which.max(vec)
w
data[,1]
data[,2]
source('~/.active-rstudio-document')
best("TX", "heart attack")
?suppressWarnings
source('~/.active-rstudio-document')
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("NY", "hert attack")
source('C:/Users/hp/Desktop/R-data/Hospital data/best.R')
best("MD", "pneumonia")
source('C:/Users/hp/Desktop/R-data/Hospital data/best.R')
source('C:/Users/hp/Desktop/R-data/Hospital data/best.R')
best("MD", "pneumonia")
best("TX","heart attack")
loc<-"TX"
data<-state.data[loc]
data<-data.frame(data)
?order
order(data)
?with
a<-c(1,2,3,45,6,8)
order(a)
a
order(a)
b<-order(a)
b
with(a,order(a))
order(a,a)
a[order(a)]
ind<-order(data[,11])
data<-data[ind,]
data[1:5,11]
data[1:5,1:11]
let<-c("alpha","beta","gamma","lambda","zeta")
order(let)
let<-c("alpha","gamma","zeta","lambda","beta")
order(let)
let[order(let)]
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
rankhospital("TX", "heart failure", 4)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, outcome,num="best") {
## Read outcome data
hosp.data<-read.csv("hospital data/outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
states<-unique(hosp.data$State)
outcomes<-c("heart attack","heart failure","pneumonia")
if(is.element(state,states)){
if(is.element(outcome,outcomes)){
##subsetting state data
states.data<-split(hosp.data,hosp.data$State)
state.hosp.data<-states.data[state]
state.hosp.data<-data.frame(state.hosp.data)
## Return hospital name in that state with lowest 30-day death
## rate
index<-match(outcome,outcomes)
hospital<-list()
if(index==1) i=11
if(index==2) i=17
if(index==3) i=23
suppressWarnings(state.hosp.data[,i]<-as.numeric(state.hosp.data[,i]))
w<-complete.cases(state.hosp.data)
state.hosp.data<-state.hosp.data[w,]
order.data<-order(state.hosp.data[,i])
state.hosp.data<-state.hosp.data[order.data,]
state.hosp.data<-state.hosp.data[order(state.hosp.data[,2]),]
## Return hospital name in that state with lowest 30-day death
## rate
if(num =="best") rank<-1
if(num=="worst") rank<-nrow(state.hosp.data)
if(num>1 & num<nrow(state.hosp.data)) rank<-num
print(state.hosp.data[rank,2])
}
else{
stop("invalid Outcome")
}
}
else{
stop("invalid State")
}
}
rm(list=ls())
rankhospital <- function(state, outcome,num="best") {
## Read outcome data
hosp.data<-read.csv("hospital data/outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
states<-unique(hosp.data$State)
outcomes<-c("heart attack","heart failure","pneumonia")
if(is.element(state,states)){
if(is.element(outcome,outcomes)){
##subsetting state data
states.data<-split(hosp.data,hosp.data$State)
state.hosp.data<-states.data[state]
state.hosp.data<-data.frame(state.hosp.data)
## Return hospital name in that state with lowest 30-day death
## rate
index<-match(outcome,outcomes)
hospital<-list()
if(index==1) i=11
if(index==2) i=17
if(index==3) i=23
suppressWarnings(state.hosp.data[,i]<-as.numeric(state.hosp.data[,i]))
w<-complete.cases(state.hosp.data)
state.hosp.data<-state.hosp.data[w,]
order.data<-order(state.hosp.data[,i])
state.hosp.data<-state.hosp.data[order.data,]
state.hosp.data<-state.hosp.data[order(state.hosp.data[,2]),]
## Return hospital name in that state with lowest 30-day death
## rate
if(num =="best") rank<-1
if(num=="worst") rank<-nrow(state.hosp.data)
if(num>1 & num<nrow(state.hosp.data)) rank<-num
print(state.hosp.data[rank,2])
}
else{
stop("invalid Outcome")
}
}
else{
stop("invalid State")
}
}
rankhospital("TX", "heart failure", 4)
loc<-"TX"
a<-read.csv("hospital data/outcome-of-care-measures.csv",colClasses = "character")
a<-split(a[,a$State])
a<-split(a,a$State)
data<-a[loc]
data<-data.frame(data)
data<-data[complete.cases(data),]
data<-a[loc]
data<-data.frame(data)
data<-data[complete.cases(data),]
data[,11]<-as.numeric(data[,11])
data<-data[complete.cases(data),]
data<-data[order(data[,11]),]
head(data[,11])
head(data[2,11])
head(data)
head(data[2,])
head(data[1:20,c(2,11)])
data<-a[loc]
data<-data.frame(data)
data<-data[order(data[,11]),]
data<-a[loc]
data<-data.frame(data)
data[,11]<-as.numeric(data[,11])
data<-data[complete.cases(data),]
data<-data[order(data[,11],data[,2]),]
source('~/.active-rstudio-document')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source('~/.active-rstudio-document')
rankhospital("MN", "heart attack", 5000)
rankhospital("MD", "heart attack", "worst")
rankhospital("TX", "heart failure", 4)
data<-a[loc]
a<-split(a,a$State)
a<-split(a,a$State)
a<-read.csv("hospital data/outcome-of-care-measures.csv",colClasses = "character")
a<-split(a,a$S)
a$loc
head(a[loc])
source('~/.active-rstudio-document')
rankall("heart attack")
str(a)
a[1]
a$AK[,2]
a$State
names(a)
states<-names(a)
a["TX"]
a["TX"][,2]
a[TX][,2]
a$AK[,11]
b<-a
a["TX",,2]
dim(a)
a[TX,,2]
index<-paste("a$",states,sep = "")
indexf<-as.factor(index)
index<-paste("b$",states,sep = "")
indexf<-as.factor(index)
b.s<-tapply(b,index,function(elem) print"working")
b.s<-tapply(b,index,function(elem) print("working"))
b.s<-tapply(b,index,function(elem) {
elem[,11]<-as.numeric(elem[,11])
})
b.s<-tapply(b,indexf,function(elem) {
elem[,11]<-as.numeric(elem[,11])
})
a[[1]][[2]]
a[[1]]
a[[1]][[2]][[2]]
a[[1]][[2]]
b.s<-lapply(a,function(elem){
elem[,11]<-as.numeric(elem[,11])
})
warnings()
data<-data.frame(data)
data[,11]<-as.numeric(data[,11])
data<-data[complete.cases(data),]
c<-data.frame(hospitals=data[,2],rate=[,"state"])
c<-data.frame(hospitals=data[,2],rate=data[,"state"])
c<-data.frame(hospitals=data[,2],rate=data[,11])
c
d<-rbind(c,c)
source('~/.active-rstudio-document')
head(rankall("heart attack", 20), 10)
source('~/.active-rstudio-document')
head(rankall("heart attack", 20), 10)
source('~/.active-rstudio-document')
head(rankall("heart attack", 20), 10)
source('~/.active-rstudio-document')
head(rankall("heart attack", 20), 10)
source('~/.active-rstudio-document')
head(rankall("heart attack", 20), 10)
hosp.data<-read.csv("hospital data/outcome-of-care-measures.csv",colClasses = "character")
states.data<-split(hosp.data,hosp.data$State)
states.data<-lapply(states.data,function(e) e[,11]<-as.numeric(e[,11]))
nrow(states.data)
source('~/.active-rstudio-document')
head(rankall("heart attack", 20), 10)
